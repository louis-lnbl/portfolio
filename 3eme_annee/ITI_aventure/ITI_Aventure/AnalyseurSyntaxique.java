/* Generated By:JavaCC: Do not edit this line. AnalyseurSyntaxique.java */
// Import tous les package necessaires 

package fr.insarouen.iti.prog.compilation.interpreteur.analyseurs;

import java.util.ArrayList;

import java.util.List;
import java.util.Set;

import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Config;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Affectation;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.AppelFonction;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Chaine;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Constante;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Parametre;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Parametres;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.Id;
import fr.insarouen.iti.prog.compilation.interpreteur.arbreSyntaxiqueAbstrait.NbEntier;


public class AnalyseurSyntaxique implements AnalyseurSyntaxiqueConstants {

  final public Config config() throws ParseException {
  Affectation res, op;
List<Affectation> lstAff = new ArrayList<Affectation>();
    res = affectation();
    lstAff.add(res);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      op = affectation();
      lstAff.add(op);
    }
   {if (true) return new Config(lstAff);}
    throw new Error("Missing return statement in function");
  }

  final public Affectation affectation() throws ParseException {
  Token id;
  AppelFonction appel;
    id = jj_consume_token(ID);
    jj_consume_token(AFF);
    appel = appelFonction();
   {if (true) return new Affectation(new Id(id.image), appel);}
    throw new Error("Missing return statement in function");
  }

  final public AppelFonction appelFonction() throws ParseException {
  Token idf;
  Parametres params;
    idf = jj_consume_token(IDF);
    jj_consume_token(PARAG);
    params = parametres();
    jj_consume_token(PARAD);
   {if (true) return new AppelFonction(idf.image, params);}
    throw new Error("Missing return statement in function");
  }

  final public Parametres parametres() throws ParseException {
  Parametre res, op;
  List<Parametre> lstParam = new ArrayList<Parametre>();
    res = parametre();
    lstParam.add(res);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRGULE);
      op = parametre();
      lstParam.add(op);
    }
   {if (true) return new Parametres(lstParam);}
    throw new Error("Missing return statement in function");
  }

  final public Parametre parametre() throws ParseException {
  Token param;
  AppelFonction appel;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      param = jj_consume_token(ID);
    {if (true) return new Id(param.image);}
      break;
    case CHAINE:
      param = jj_consume_token(CHAINE);
    {if (true) return new Chaine(param.image);}
      break;
    case NB_ENTIER:
      param = jj_consume_token(NB_ENTIER);
    {if (true) return new NbEntier(param.image);}
      break;
    case IDF:
      appel = appelFonction();
    {if (true) return appel;}
      break;
    case CONST:
      param = jj_consume_token(CONST);
    {if (true) return new Constante(param.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public AnalyseurSyntaxiqueTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x200,0x1ac00,};
   }

  /** Constructor with InputStream. */
  public AnalyseurSyntaxique(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalyseurSyntaxique(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalyseurSyntaxiqueTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalyseurSyntaxique(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalyseurSyntaxiqueTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalyseurSyntaxique(AnalyseurSyntaxiqueTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalyseurSyntaxiqueTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
